// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[] @relation("inviter")
  comments TicketComment[]
}

model Session {
  id                   String   @id @default(cuid())
  userId               String
  token                String   @unique
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  activeOrganizationId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganization   Organization? @relation(fields: [activeOrganizationId], references: [id], onDelete: SetNull)
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  metadata  Json?
  createdAt DateTime @default(now())
  
  members     Member[]
  invitations Invitation[]
  sessions    Session[]
  tickets     Ticket[]
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
}

model Invitation {
  id             String   @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  
  inviter      User         @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([email, organizationId])
}

enum TicketStatus {
  OPEN
  CLOSED
  IN_PROGRESS
  ON_HOLD
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}


model Ticket {
  id String @id @default(cuid())
  title String
  description String
  status TicketStatus
  priority TicketPriority
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  responseTime Float?
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments TicketComment[]
}

model TicketComment {
  id String @id @default(cuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId String
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}